# 乐谱共享平台：让每一段和声都被珍藏

[北京邮电大学爱乐合唱团](https://aiyueaijia.com)

## 🌟 项目缘起
在合唱团的排练室里，乐谱如同散落的星光，承载着无数次的和声共鸣。我们常常为寻找一份准确的乐谱版本而奔波，为分享排练心得而周折。这个平台诞生于对合唱艺术的热爱，希望通过技术的力量，让每一份乐谱都找到它的归宿，让每一次排练都充满默契与和谐。

## 🎵 核心功能设计理念
每个功能模块的诞生都源于真实的合唱排练场景，承载着我们对合唱艺术的理解与尊重：

### 乐谱管理系统
**设计初衷**：在合唱团日常排练中，我们发现乐谱版本混乱是最常见的痛点——指挥修改的标记、不同声部的注释、新旧版本的更迭常常让团员无所适从。

**实现思路**：提供简单直观的乐谱上传与版本管理功能，支持PDF、图片等多种格式。系统会自动记录每次上传的时间与上传者信息，形成基础的版本追踪，方便团员获取最新乐谱与历史记录。

### 声部协作模块
**设计初衷**：混声合唱团中，各声部往往需要独立练习后再合排。传统PDF乐谱无法实现分声部查看，导致团员不得不下载完整乐谱后自行寻找对应声部。

**实现思路**：支持上传分声部乐谱文件，团员可根据自己的声部选择查看对应乐谱。系统会记录个人声部选择偏好，方便下次访问时快速定位。

### 排练记录工具
**设计初衷**：优秀的合唱需要持续精进，而排练中的易错点、情感处理细节往往难以准确记录和传承，新团员更是无法借鉴历史排练经验。

**实现思路**：提供基础的排练记录功能，支持按作品和段落添加文字备注，记录排练重点和需要改进的部分，形成简单的排练档案。

### 社区分享平台
**设计初衷**：合唱不仅是音乐艺术，更是情感交流。我们希望打破传统合唱团的封闭性，建立一个能够分享排练成果、交流心得的温暖社区。

**实现思路**：通过公告系统发布合唱团最新动态，支持管理员发布通知和活动信息，保持团员间的信息同步与情感连接。

## 🚀 快速开始
### 本地开发
```bash
# 克隆仓库
git clone https://github.com/yourusername/score_web.git
cd score_web

# 创建虚拟环境
python -m venv venv
source venv/bin/activate  # Linux/Mac
venv\Scripts\activate     # Windows

# 安装依赖
pip install -r requirements.txt

# 初始化数据库
python init_db.py

# 启动开发服务器
python run.py
```

### Docker部署
```bash
# 构建镜像
docker-compose build

# 启动服务
docker-compose up -d
```

## 📋 项目结构设计
我们遵循「功能模块化、情感一体化」的设计原则，将系统划分为以下核心部分：

```
score_web/
├── app/                  # 应用主目录（采用MVC架构思想）
│   ├── static/           # 静态资源库（乐谱文件、音频记录、团员头像等）
│   │                     # 特别设计了分级存储策略：临时文件→长期归档→历史备份
│   ├── templates/        # 视图模板（所有页面采用响应式设计，适配手机/平板/桌面设备）
│   │                     # 模板继承体系确保视觉风格统一，同时支持个性化主题
│   └── *routes.py        # 功能模块路由（按业务领域划分，确保职责单一清晰）
│       ├── article_routes.py  # 文章内容管理（演出回顾、排练心得）
│       ├── collection_routes.py # 乐谱集管理（按作品/声部/难度分类）
│       └── track_routes.py    # 排练追踪系统（记录、分析、改进）
├── config.py             # 配置中心（环境隔离设计，区分开发/测试/生产环境）
├── requirements.txt      # 依赖管理（最小化依赖原则，确保系统轻量稳定）
└── run.py                # 应用入口（采用工厂模式，支持多实例部署）
```

**设计考量**：我们刻意避免了过度工程化，保持代码结构清晰易懂。每个模块都能独立开发和测试，就像合唱团中的每个声部既能单独展示，又能完美融合。

## 🤝 贡献指南
如同合唱团需要每个声部的共同努力，我们欢迎任何形式的贡献：
1. Fork本仓库
2. 创建特性分支 (`git checkout -b feature/amazing-feature`)
3. 提交更改 (`git commit -m 'Add some amazing feature'`)
4. 推送到分支 (`git push origin feature/amazing-feature`)
5. 打开Pull Request

## 📜 许可证
本项目采用MIT许可证 - 详情参见 [LICENSE](LICENSE) 文件

## 💌 致每一位合唱爱好者
音乐因分享而美妙，和声因共鸣而动人。愿这个平台成为你我音乐之路上的忠实伙伴，让每一段旋律都被铭记，让每一次合唱都成为永恒。

---
*“音乐是心灵的语言，合唱是灵魂的共鸣”* 🎶